# before removing the payment view |
   #                               v

""" from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from .models import Event
from .forms import BookingForm
from django.core.mail import send_mail
from django.conf import settings
from datetime import date

def booking(request, slug=None):
    event = get_object_or_404(Event, slug=slug)

    # Check if the event is bookable (event date and availability)
    if event.event_date < date.today() or not event.is_available:
        messages.error(request, "Sorry, this event is not available for booking yet.")
        return redirect('events')

    # Handle both GET and POST requests
    if request.method == 'POST':
        form = BookingForm(request.POST)
        if form.is_valid():
            # Create the Booking instance without saving to the database yet
            booking = form.save(commit=False)

            # Assign the logged-in user to the booking
            booking.user = request.user  # This links the booking to the currently logged-in user

            # Set the total amount based on the event's price
            booking.total_amount = event.price  # Set the total amount dynamically from the event's price

            # Save the booking to the database
            booking.save()

            # Send email notification to the user (Booking confirmation)
            subject = f"Booking Confirmation for {event.name}"
            message = f"Thank you for booking {event.name}.\nEvent Date: {event.event_date}\nVenue: {booking.venue}\n\nYour booking has been confirmed."
            send_mail(
                subject,
                message,
                settings.EMAIL_HOST_USER,
                [booking.cus_email],  # Use the customer's email from the form
                fail_silently=False,
            )

            # Also notify the admin
            admin_subject = f"New Booking for {event.name}"
            admin_message = f"A new booking has been made for {event.name} by {booking.cus_name}. Event Date: {event.event_date}, Venue: {booking.venue}."
            send_mail(
                admin_subject,
                admin_message,
                settings.EMAIL_HOST_USER,
                [settings.ADMIN_EMAIL],  # Admin's email from settings
                fail_silently=False,
            )

            # Redirect to the payment page with the booking ID
            messages.success(request, "Your event has been booked successfully! Please proceed with the payment.")
            return redirect('paymentapp:payment_view', booking_id=booking.id)
        else:
            print(f"Form Errors: {form.errors}")  # Debug line to check form errors
            messages.error(request, "There was an error with your booking. Please check the form and try again.")
    else:
        # Pre-populate the form with the event data
        initial_data = {
            'event_name': event.name,  # Ensure event_name is passed to the form
            'event_date': event.event_date,
            'venue': event.location
        }
        form = BookingForm(initial=initial_data)

    return render(request, 'booking.html', {'form': form, 'event': event}) """

# before using the utils/email
@login_required
def booking(request, slug=None):
    event = get_object_or_404(Event, slug=slug)

    # Check if the event is bookable
    if event.event_date < date.today() or not event.is_available:
        messages.error(request, "Sorry, this event is not available for booking yet.")
        return redirect('events')

    if request.method == 'POST':
        form = BookingForm(request.POST)
        if form.is_valid():
            print('Form is valid')

            # Create booking instance but don't save it yet
            booking = form.save(commit=False)

            # Manually assign the user (since it's excluded from the form)
            booking.user = request.user

            # Set the event data (event_name and event_date)
            booking.event_name = event
            booking.event_date = event.event_date

            # Set the total amount (price of the event)
            booking.total_amount = event.price

            # Save the booking to the database
            booking.save()
            print(f"Booking created: {booking}")
            print(f"Booking user: {booking.user}")
            print(f"Event: {booking.event_name}")

            # Email to user (booking confirmation)
            send_mail(
                f"Booking Confirmation for {event.name}",
                '',
                settings.EMAIL_HOST_USER,
                [booking.cus_email],
                fail_silently=False,
                html_message=f'''
                    <html>
                        <body style="font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4;">
                            <div style="max-width: 600px; margin: 20px auto; background-color: #ffffff; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                                <div style="padding: 20px; background-color: #4CAF50; color: #ffffff; border-radius: 10px 10px 0 0; text-align: center;">
                                    <h2>Booking Confirmation</h2>
                                </div>
                                <div style="padding: 20px;">
                                    <p>Dear <strong>{booking.cus_name}</strong>,</p>
                                    <p>We are delighted to confirm your booking for the event <strong>{event.name}</strong>. Below are the details of your booking:</p>
                                    <div style="border: 1px solid #ddd; padding: 10px; border-radius: 5px; background-color: #f9f9f9;">
                                        <p><strong>Event Name:</strong> {event.name}</p>
                                        <p><strong>Event Date:</strong> {event.event_date}</p>
                                        <p><strong>Venue:</strong> {booking.venue}</p>
                                        <p><strong>Total Amount:</strong> ${booking.total_amount}</p>
                                    </div>
                                    <p>We look forward to hosting you at the event. If you have any questions or need to make changes to your booking, please do not hesitate to contact us.</p>
                                    <p>Warm regards,</p>
                                    <p><strong>The EventPro Team</strong></p>
                                </div>
                            </div>
                        </body>
                    </html>
                '''
            )

            # Email to admin (new booking notification)
            send_mail(
                f"New Booking for {event.name}",
                '',
                settings.EMAIL_HOST_USER,
                [settings.ADMIN_EMAIL],
                fail_silently=False,
                html_message=f'''
                    <html>
                        <body style="font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4;">
                            <div style="max-width: 600px; margin: 20px auto; background-color: #ffffff; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                                <div style="padding: 20px; background-color: #2196F3; color: #ffffff; border-radius: 10px 10px 0 0; text-align: center;">
                                    <h2>New Booking Notification</h2>
                                </div>
                                <div style="padding: 20px;">
                                    <p>Hello Admin,</p>
                                    <p>A new booking has been made for the event <strong>{event.name}</strong>. Below are the booking details:</p>
                                    <div style="border: 1px solid #ddd; padding: 10px; border-radius: 5px; background-color: #f9f9f9;">
                                        <p><strong>Event Name:</strong> {event.name}</p>
                                        <p><strong>Event Date:</strong> {event.event_date}</p>
                                        <p><strong>Customer Name:</strong> {booking.cus_name}</p>
                                        <p><strong>Venue:</strong> {booking.venue}</p>
                                        <p><strong>Total Amount:</strong> ${booking.total_amount}</p>
                                    </div>
                                    <p>To view or manage this booking, please visit the admin panel.</p>
                                    <p>Regards,</p>
                                    <p><strong>The EventPro System</strong></p>
                                </div>
                            </div>
                        </body>
                    </html>
                '''
            )

            messages.success(request, "Your event has been booked successfully!")
            return redirect('userapp:booking_dashboard')  # Redirect to booking dashboard
        else:
            print(f"Form Errors: {form.errors}")
            messages.error(request, "There was an error with your booking. Please check the form and try again.")
    else:
        # Pre-populate the form with the event data
        form = BookingForm(event_instance=event)

    return render(request, 'booking.html', {'form': form, 'event': event})






index.html
{% extends 'base.html' %}
{% load static %}

{% block title %}Home{% endblock %}

{% block content %}
<section class="hero-section">
  <div class="video-container">
    <video autoplay loop muted>
      <source src="{% static 'images/pexel-party.mp4' %}" type="video/mp4">
      Your browser does not support the video tag.
    </video>
  </div>
  <div class="hero-content">
    <div class="container">
      <h1 class="display-4">Transforming Your Event Ideas into Reality</h1>
      <p class="lead">Flawless event planning with top-tier professionals. Let us bring your vision to life.</p>
      <a href="{% url 'events' %}" class="btn btn-light btn-lg">Explore Events</a>
    </div>
  </div>
</section>

<section class="events-section">
  <div class="container">
    <h2 class="section-title">Top Events</h2>
    <div class="row">
      {% for event in events %}
      <div class="col-md-4">
        <div class="event-card">
          <div class="event-card-img">
            <img src="{% if event.img %}{{ event.img.url }}{% else %}{% static 'images/default-event.jpg' %}{% endif %}"
              alt="{{ event.name }}">
          </div>
          <div class="event-card-body">
            <h3 class="event-card-title">{{ event.name }}</h3>
            <p class="event-card-text">{{ event.desc|truncatewords:8 }}</p>
            <a href="{% url 'booking' slug=event.slug %}" class="event-card-btn">Book Now</a>
          </div>
        </div>
      </div>
      {% empty %}
      <div class="col-12 text-center">
        <p>No events available at the moment. Please check back later.</p>
      </div>
      {% endfor %}
    </div>
  </div>
</section>

{% endblock %}


<!-- Custom Styles for Cards -->
<style>
  /* General Styles */
  body {
    font-family: 'Roboto', Arial, sans-serif;
    margin: 0;
    padding: 0;
    line-height: 1.6;
    background-color: #f8f9fa;
    color: #333;
  }

  h1,
  h2,
  h3 {
    font-weight: bold;
    color: #333;
  }

  a {
    text-decoration: none;
    transition: color 0.3s ease;
  }

  a:hover {
    color: #007bff;
  }

  /* Hero Section */
  .hero-section {
    position: relative;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: #fff;
  }

  .video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: -1;
  }

  .video-container video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hero-content {
    z-index: 2;
    max-width: 800px;
  }

  .hero-content h1 {
    font-size: 3rem;
    margin-bottom: 20px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .hero-content p {
    font-size: 1.2rem;
    margin-bottom: 30px;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }

  .hero-content .btn {
    padding: 12px 30px;
    background-color: #007bff;
    color: #fff;
    border-radius: 30px;
    font-size: 1rem;
    transition: background-color 0.3s ease, transform 0.2s ease;
  }

  .hero-content .btn:hover {
    background-color: #0056b3;
    transform: translateY(-2px);
  }

  /* Events Section */
  .events-section {
    padding: 60px 15px;
    background-color: #f8f9fa;
  }

  .events-section .section-title {
    font-size: 2.5rem;
    margin-bottom: 40px;
    text-align: center;
    color: #333;
  }

  /* Events Cards */
  .events-section .row {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    /* Center-align cards */
    gap: 30px;
    /* Increased spacing between cards */
  }

  .event-card {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid #eaeaea;
    display: flex;
    flex-direction: column;
    max-width: 100%;
    width: 300px;
    /* Fixed width for consistent layout */
    height: auto;
    /* Adjust height dynamically */
    overflow: hidden;
    
  }

  .event-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
  }

  .event-card-img {
    width: 100%;
    height: 180px;
    overflow: hidden;
    border-bottom: 1px solid #eaeaea;
  }

  .event-card-img img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .event-card:hover .event-card-img img {
    transform: scale(1.1);
  }

  .event-card-body {
    padding: 20px;
    text-align: center;
  }

  .event-card-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #007bff;
    margin-bottom: 10px;
  }

  .event-card-text {
    font-size: 1rem;
    color: #666;
    margin-bottom: 20px;
    line-height: 1.4;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    /* Display max 3 lines */
    -webkit-box-orient: vertical;
  }

  .event-card-btn {
    display: inline-block;
    padding: 12px 30px;
    background: linear-gradient(90deg, #007bff, #0056b3);
    color: #fff;
    border-radius: 50px;
    font-size: 1rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .event-card-btn:hover {
    background: linear-gradient(90deg, #0056b3, #003d80);
    transform: translateY(-2px);
  }

  /* Footer Section (optional improvement) */
  footer {
    background-color: #333;
    color: #fff;
    padding: 20px;
    text-align: center;
  }

  footer a {
    color: #007bff;
    margin: 0 10px;
    font-size: 1.2rem;
    transition: color 0.3s ease;
  }

  footer a:hover {
    color: #0056b3;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .event-card {
      width: 90%;
      /* Adjust card width for smaller devices */
    }

    .hero-content h1 {
      font-size: 2rem;
    }

    .hero-content p {
      font-size: 1rem;
    }
  }

  @media (max-width: 576px) {
    .event-card {
      width: 100%;
      /* Take full width on mobile */
    }

    .hero-content h1 {
      font-size: 1.8rem;
    }

    .hero-content p {
      font-size: 0.9rem;
    }
  }
</style>



payment app razor pay stuff
""" import razorpay
from django.conf import settings
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.mail import send_mail
from django.http import JsonResponse

from .forms import PaymentForm
from .models import Payment
from eventapp.models import Booking

# Initialize Razorpay client with your Razorpay key and secret from settings
razorpay_client = razorpay.Client(auth=(settings.RAZORPAY_KEY_ID, settings.RAZORPAY_KEY_SECRET))

@login_required
def payment_view(request, booking_id):
    booking = get_object_or_404(Booking, id=booking_id, user=request.user)
    
    # Initialize payment details
    payment_method = None
    razorpay_order_id = None

    # Process payment options
    if request.method == 'POST':
        form = PaymentForm(request.POST, request.FILES)
        
        if form.is_valid():
            payment = form.save(commit=False)
            payment.booking = booking
            payment.amount = booking.total_amount

            # Get the payment method from the form
            payment_method = form.cleaned_data['payment_method']
            booking.payment_method = payment_method

            # Handle the logic for each payment method
            if payment_method == 'Cash':
                booking.payment_status = 'Pending'  # Cash will be paid later
                payment.save()  # Cash doesn't need to be processed immediately
            else:
                payment.save()  # For UPI, Bank Transfer, and Online (Razorpay)
                booking.payment_status = 'Pending'  # Set status to pending for now
            
            booking.save()

            # Notify the admin
            send_mail(
                subject="New Payment Submitted",
                message=f"Payment for Booking #{booking.id} has been submitted.\nPayment Method: {payment_method}\nAmount: ₹{payment.amount}.",
                from_email=settings.EMAIL_HOST_USER,
                recipient_list=[settings.ADMIN_EMAIL],
            )

            messages.success(request, "Payment information submitted successfully.")
            return redirect('eventapp:booking_dashboard')
    else:
        form = PaymentForm()

    # Generate Razorpay order if the payment method is Online
    if booking.payment_method == 'Online':
        razorpay_order_id = create_razorpay_order(booking.total_amount)
        # Create a Payment record for Razorpay with status 'Pending'
        payment = Payment.objects.create(
            booking=booking,
            amount=booking.total_amount,
            payment_method='Online',
            status='Pending',
            razorpay_order_id=razorpay_order_id
        )

    return render(request, 'payment.html', {
        'booking': booking,
        'form': form,
        'razorpay_order_id': razorpay_order_id,
        'razorpay_key_id': settings.RAZORPAY_KEY_ID,  # Razorpay key ID for frontend integration
        'payment_method': payment_method,
    })

def create_razorpay_order(amount):
   
    Create a Razorpay order with the specified amount.
    Amount is expected to be in INR (paise), so we multiply by 100.

    amount_in_paise = int(amount * 100)  # Convert to paise
    order = razorpay_client.order.create(dict(
        amount=amount_in_paise,  # Amount in paise
        currency='INR',
        receipt=str(order['id']),  # Unique receipt identifier
        notes={'description': 'Event Booking Payment'}
    ))
    return order['id']

@login_required
def payment_verify(request):
 
    Verify Razorpay payment after the user completes the transaction.
    This method will handle the verification of the payment signature and status.
 
    if request.method == 'POST':
        data = request.body.decode('utf-8')
        payment_data = json.loads(data)

        razorpay_order_id = payment_data.get('razorpay_order_id')
        razorpay_payment_id = payment_data.get('razorpay_payment_id')
        razorpay_signature = payment_data.get('razorpay_signature')

        # Verify the signature using Razorpay's helper method
        try:
            response = razorpay_client.utility.verify_payment_signature({
                'razorpay_order_id': razorpay_order_id,
                'razorpay_payment_id': razorpay_payment_id,
                'razorpay_signature': razorpay_signature
            })
            
            if response is None:
                raise ValueError("Invalid Signature")

            # Mark the payment as completed
            payment = Payment.objects.get(razorpay_order_id=razorpay_order_id)
            payment.status = 'Completed'
            payment.razorpay_payment_id = razorpay_payment_id
            payment.save()

            # Update booking payment status
            booking = payment.booking
            booking.payment_status = 'Paid'
            booking.save()

            # Notify the admin about the successful payment
            send_mail(
                subject="Payment Completed",
                message=f"Payment for Booking #{booking.id} has been completed successfully using Razorpay.\nAmount: ₹{booking.total_amount}.",
                from_email=settings.EMAIL_HOST_USER,
                recipient_list=[settings.ADMIN_EMAIL],
            )

            return JsonResponse({"status": "success", "message": "Payment verified"})
        except Exception as e:
            return JsonResponse({"status": "failure", "message": str(e)})

    return JsonResponse({"status": "failure", "message": "Invalid request"})
 """

